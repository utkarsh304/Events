{"ast":null,"code":"var _jsxFileName = \"C:\\\\Complete Web Development\\\\React.js\\\\01-adv-starting-project\\\\frontend\\\\src\\\\pages\\\\Events.js\",\n  _s = $RefreshSig$();\nimport { Suspense } from 'react';\nimport { useLoaderData, json, defer, Await } from 'react-router-dom';\nimport EventsList from '../components/EventsList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EventsPage = () => {\n  _s();\n  // Option-1(Without using defer) :-\n  // const data = useLoaderData();\n\n  // // if (data.isError) {\n  // //     return <p>{data.message}</p>\n  // // }\n  // const events = data.events;\n\n  // return <EventsList events={events} />\n\n  // Option-2(Using defer) :-\n  const {\n    events\n  } = useLoaderData();\n  return /*#__PURE__*/_jsxDEV(Suspense, {\n    children: [\"                  \", /*#__PURE__*/_jsxDEV(Await, {\n      resolve: events,\n      children: loadEvents => /*#__PURE__*/_jsxDEV(EventsList, {\n        events: loadEvents\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 34\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, this);\n};\n_s(EventsPage, \"xTcuS98fsVcq20se00iLm8bDBmQ=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nasync function loadEvents() {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    // return {isError: true, message: \"Could not fetch events.\"};\n    // OR :-\n    // throw {message: \"Could not fetch events.\"};\n    // OR :-\n    // throw new Response(JSON.stringify({ message: \"Could not fetch events!\" }), { status: 500 });\n    // OR :-\n    throw json({\n      message: \"Could not fetch events!\"\n    }, {\n      status: 500\n    }); // json from react-router-dom.\n  } else {\n    // const resData = await response.json();\n    // return resData.events;\n    return response;\n  }\n}\nexport function loader() {\n  return defer({\n    events: loadEvents()\n  });\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["Suspense","useLoaderData","json","defer","Await","EventsList","jsxDEV","_jsxDEV","EventsPage","_s","events","children","resolve","loadEvents","fileName","_jsxFileName","lineNumber","columnNumber","_c","response","fetch","ok","message","status","loader","$RefreshReg$"],"sources":["C:/Complete Web Development/React.js/01-adv-starting-project/frontend/src/pages/Events.js"],"sourcesContent":["import { Suspense } from 'react';\r\nimport { useLoaderData, json, defer, Await } from 'react-router-dom';\r\n\r\nimport EventsList from '../components/EventsList';\r\n\r\nconst EventsPage = () => {\r\n    // Option-1(Without using defer) :-\r\n    // const data = useLoaderData();\r\n\r\n    // // if (data.isError) {\r\n    // //     return <p>{data.message}</p>\r\n    // // }\r\n    // const events = data.events;\r\n\r\n    // return <EventsList events={events} />\r\n\r\n    // Option-2(Using defer) :-\r\n    const { events } = useLoaderData();\r\n\r\n    return (\r\n        <Suspense>                  {/* The Suspense component from React is used to show the fallback while we are waiting for other data to arrive. */}                 \r\n            <Await resolve={events}>\r\n                {(loadEvents) => <EventsList events={loadEvents} />}\r\n            </Await>\r\n        </Suspense>\r\n    );\r\n}\r\n\r\nexport default EventsPage;\r\n\r\nasync function loadEvents() {\r\n    const response = await fetch('http://localhost:8080/events');\r\n\r\n    if (!response.ok) {\r\n        // return {isError: true, message: \"Could not fetch events.\"};\r\n        // OR :-\r\n        // throw {message: \"Could not fetch events.\"};\r\n        // OR :-\r\n        // throw new Response(JSON.stringify({ message: \"Could not fetch events!\" }), { status: 500 });\r\n        // OR :-\r\n        throw json({ message: \"Could not fetch events!\" }, { status: 500 });    // json from react-router-dom.\r\n    } else {\r\n        // const resData = await response.json();\r\n        // return resData.events;\r\n        return response;\r\n    }\r\n}\r\n\r\nexport function loader() {\r\n    return defer({\r\n        events: loadEvents()\r\n    });\r\n}"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,aAAa,EAAEC,IAAI,EAAEC,KAAK,EAAEC,KAAK,QAAQ,kBAAkB;AAEpE,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB;EACA;;EAEA;EACA;EACA;EACA;;EAEA;;EAEA;EACA,MAAM;IAAEC;EAAO,CAAC,GAAGT,aAAa,EAAE;EAElC,oBACIM,OAAA,CAACP,QAAQ;IAAAW,QAAA,GAAC,oBAAkB,eACxBJ,OAAA,CAACH,KAAK;MAACQ,OAAO,EAAEF,MAAO;MAAAC,QAAA,EACjBE,UAAU,iBAAKN,OAAA,CAACF,UAAU;QAACK,MAAM,EAAEG;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAG;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAC/C;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACD;AAEnB,CAAC;AAAAR,EAAA,CArBKD,UAAU;EAAA,QAYOP,aAAa;AAAA;AAAAiB,EAAA,GAZ9BV,UAAU;AAuBhB,eAAeA,UAAU;AAEzB,eAAeK,UAAUA,CAAA,EAAG;EACxB,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IACd;IACA;IACA;IACA;IACA;IACA;IACA,MAAMnB,IAAI,CAAC;MAAEoB,OAAO,EAAE;IAA0B,CAAC,EAAE;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC,CAAC,CAAI;EAC5E,CAAC,MAAM;IACH;IACA;IACA,OAAOJ,QAAQ;EACnB;AACJ;AAEA,OAAO,SAASK,MAAMA,CAAA,EAAG;EACrB,OAAOrB,KAAK,CAAC;IACTO,MAAM,EAAEG,UAAU;EACtB,CAAC,CAAC;AACN;AAAC,IAAAK,EAAA;AAAAO,YAAA,CAAAP,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Complete Web Development\\\\React.js\\\\01-adv-starting-project\\\\frontend\\\\src\\\\App.js\";\n// Challenge / Exercise\n\n// 1. Add five new (dummy) page components (content can be simple <h1> elements)\n//    - HomePage\n//    - EventsPage\n//    - EventDetailPage\n//    - NewEventPage\n//    - EditEventPage\n// 2. Add routing & route definitions for these five pages\n//    - / => HomePage\n//    - /events => EventsPage\n//    - /events/<some-id> => EventDetailPage\n//    - /events/new => NewEventPage\n//    - /events/<some-id>/edit => EditEventPage\n// 3. Add a root layout that adds the <MainNavigation> component above all page components\n// 4. Add properly working links to the MainNavigation\n// 5. Ensure that the links in MainNavigation receive an \"active\" class when active\n// 6. Output a list of dummy events to the EventsPage\n//    Every list item should include a link to the respective EventDetailPage\n// 7. Output the ID of the selected event on the EventDetailPage\n// BONUS: Add another (nested) layout route that adds the <EventNavigation> component above all /events... page components\nimport { RouterProvider, createBrowserRouter } from \"react-router-dom\";\nimport HomePage from \"./pages/Home\";\nimport EventDetailPage, { loader as eventDetailLoader, action as deleteEventAction } from \"./pages/EventDetail\";\nimport EventsPage, { loader as eventsLoader } from \"./pages/Events\";\n// import NewEventPage, { action as newEventsAction } from \"./pages/NewEvent\";\nimport { action as manipulateEventAction } from \"./components/EventForm\";\nimport NewEventPage from \"./pages/NewEvent\";\nimport EditEventPage from \"./pages/EditEvent\";\nimport RootLayout from \"./pages/Root\";\nimport EventsRootLayout from \"./pages/EventsRoots\";\nimport ErrorPage from \"./pages/Error\";\nimport NewsletterPage from \"./pages/Newsletter\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst router = createBrowserRouter([{\n  path: \"/\",\n  element: /*#__PURE__*/_jsxDEV(RootLayout, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 14\n  }, this),\n  errorElement: /*#__PURE__*/_jsxDEV(ErrorPage, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 19\n  }, this),\n  children: [\n  // { path: \"\", element: <HomePage /> },\n  {\n    index: true,\n    element: /*#__PURE__*/_jsxDEV(HomePage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 31\n    }, this)\n  }, {\n    path: \"events\",\n    element: /*#__PURE__*/_jsxDEV(EventsRootLayout, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 18\n    }, this),\n    children: [\n    // {\n    //   index: true, element: <EventsPage />, loader: async () => {        // loader is a property that wants a function as a value,\n    //     const response = await fetch('http://localhost:8080/events');    // this function will be executed by the react-router\n    //                                                                      // whenever this route is about to be visited.\n    //     if (!response.ok) {\n    //       // ...\n    //     } else {\n    //       const resData = await response.json();\n    //       return resData.events;                                         // This returned data is then rendered in the <EventsPage> component.\n    //     }\n    //   }\n    // },\n\n    // OR :-\n\n    {\n      index: true,\n      element: /*#__PURE__*/_jsxDEV(EventsPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 35\n      }, this),\n      loader: eventsLoader\n    }, {\n      path: \":eventId\",\n      id: \"event-detail\",\n      loader: eventDetailLoader,\n      children: [{\n        index: true,\n        element: /*#__PURE__*/_jsxDEV(EventDetailPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 26\n        }, this),\n        action: deleteEventAction\n      }, {\n        path: \"edit\",\n        element: /*#__PURE__*/_jsxDEV(EditEventPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 40\n        }, this),\n        action: manipulateEventAction\n      }]\n    }, {\n      path: \"new\",\n      element: /*#__PURE__*/_jsxDEV(NewEventPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 35\n      }, this),\n      action: manipulateEventAction\n    }]\n  }, {\n    path: 'newsletter',\n    element: /*#__PURE__*/_jsxDEV(NewsletterPage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 18\n    }, this),\n    action: newsletterAction\n  }]\n}]);\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(RouterProvider, {\n    router: router\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 10\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["RouterProvider","createBrowserRouter","HomePage","EventDetailPage","loader","eventDetailLoader","action","deleteEventAction","EventsPage","eventsLoader","manipulateEventAction","NewEventPage","EditEventPage","RootLayout","EventsRootLayout","ErrorPage","NewsletterPage","jsxDEV","_jsxDEV","router","path","element","fileName","_jsxFileName","lineNumber","columnNumber","errorElement","children","index","id","newsletterAction","App","_c","$RefreshReg$"],"sources":["C:/Complete Web Development/React.js/01-adv-starting-project/frontend/src/App.js"],"sourcesContent":["// Challenge / Exercise\n\n// 1. Add five new (dummy) page components (content can be simple <h1> elements)\n//    - HomePage\n//    - EventsPage\n//    - EventDetailPage\n//    - NewEventPage\n//    - EditEventPage\n// 2. Add routing & route definitions for these five pages\n//    - / => HomePage\n//    - /events => EventsPage\n//    - /events/<some-id> => EventDetailPage\n//    - /events/new => NewEventPage\n//    - /events/<some-id>/edit => EditEventPage\n// 3. Add a root layout that adds the <MainNavigation> component above all page components\n// 4. Add properly working links to the MainNavigation\n// 5. Ensure that the links in MainNavigation receive an \"active\" class when active\n// 6. Output a list of dummy events to the EventsPage\n//    Every list item should include a link to the respective EventDetailPage\n// 7. Output the ID of the selected event on the EventDetailPage\n// BONUS: Add another (nested) layout route that adds the <EventNavigation> component above all /events... page components\nimport { RouterProvider, createBrowserRouter } from \"react-router-dom\"\nimport HomePage from \"./pages/Home\";\nimport EventDetailPage, { loader as eventDetailLoader, action as deleteEventAction } from \"./pages/EventDetail\";\nimport EventsPage, { loader as eventsLoader } from \"./pages/Events\";\n// import NewEventPage, { action as newEventsAction } from \"./pages/NewEvent\";\nimport { action as manipulateEventAction } from \"./components/EventForm\";\nimport NewEventPage from \"./pages/NewEvent\";\nimport EditEventPage from \"./pages/EditEvent\";\nimport RootLayout from \"./pages/Root\";\nimport EventsRootLayout from \"./pages/EventsRoots\";\nimport ErrorPage from \"./pages/Error\";\nimport NewsletterPage from \"./pages/Newsletter\";\n\nconst router = createBrowserRouter([\n  {\n    path: \"/\",\n    element: <RootLayout />,\n    errorElement: <ErrorPage />,\n    children: [\n      // { path: \"\", element: <HomePage /> },\n      { index: true, element: <HomePage /> },\n      {\n        path: \"events\",\n        element: <EventsRootLayout />,\n        children: [\n          // {\n          //   index: true, element: <EventsPage />, loader: async () => {        // loader is a property that wants a function as a value,\n          //     const response = await fetch('http://localhost:8080/events');    // this function will be executed by the react-router\n          //                                                                      // whenever this route is about to be visited.\n          //     if (!response.ok) {\n          //       // ...\n          //     } else {\n          //       const resData = await response.json();\n          //       return resData.events;                                         // This returned data is then rendered in the <EventsPage> component.\n          //     }\n          //   }\n          // },\n\n          // OR :-\n\n          { index: true, element: <EventsPage />, loader: eventsLoader },\n          {\n            path: \":eventId\",\n            id: \"event-detail\",\n            loader: eventDetailLoader,\n            children: [\n              {\n                index: true,\n                element: <EventDetailPage />,\n                action: deleteEventAction\n              },\n              { path: \"edit\", element: <EditEventPage />, action: manipulateEventAction }\n            ]\n          },\n          { path: \"new\", element: <NewEventPage />, action: manipulateEventAction },\n        ]\n      },\n      {\n        path: 'newsletter',\n        element: <NewsletterPage />,\n        action: newsletterAction,\n      }\n    ]\n  }\n]);\n\nfunction App() {\n  return <RouterProvider router={router} />;\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}